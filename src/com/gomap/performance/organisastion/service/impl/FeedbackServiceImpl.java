/**
 * Generated By Krishnakant Bairagi
 */
package com.gomap.performance.organisastion.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.gomap.performance.master.constant.AppConstants;
import com.gomap.performance.organisastion.dao.FeedbackDao;
import com.gomap.performance.organisastion.dto.EmFeedbackRequestDto;
import com.gomap.performance.organisastion.dto.FeedbackRequestParaMpgDto;
import com.gomap.performance.organisastion.dto.ResponseDTO;
import com.gomap.performance.organisastion.enumorg.ErrorCodeEnums;
import com.gomap.performance.organisastion.model.EmFeedbackRequest;
import com.gomap.performance.organisastion.model.FeedbackEvaluation;
import com.gomap.performance.organisastion.model.FeedbackRequestParaMpg;
import com.gomap.performance.organisastion.model.Reviewer;
import com.gomap.performance.organisastion.service.FeedbackService;

/**
 * @author Fujitsu
 *
 */
@Service
public class FeedbackServiceImpl implements FeedbackService {

	
	private static final Logger logger = LoggerFactory.getLogger(FeedbackServiceImpl.class);
	
	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.FeedbackService#getFeedbackListByParameter(java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.String)
	 */
	@Autowired
	private FeedbackDao feedbackDao;
	
	@Override
	public ResponseDTO getFeedbackListByParameter(Integer empId, Integer projectId, String emplyeeName,
			String departmentName) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.FeedbackService#getFeedbackRequestAlongWithEmp(java.lang.Integer, java.lang.Integer)
	 */
	@Override
	public ResponseDTO getFeedbackRequestAlongWithEmp(Integer empId, Integer projectId) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.FeedbackService#getFeedBack(java.lang.Integer, java.lang.Integer)
	 */
	@Override
	public ResponseDTO getFeedBack(Integer empId, Integer projectId) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.FeedbackService#createFeedbackRequest(com.gomap.performance.organisastion.model.EmFeedbackRequest)
	 */


	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.FeedbackService#getPendingFeedback(java.lang.Integer, java.lang.Integer)
	 */
	@Override
	@Transactional
	public ResponseDTO getPendingFeedback(Integer employeeId, Integer level) throws Exception {
		// TODO Auto-generated method stub
		ResponseDTO responseDTO=new ResponseDTO();
		try {
			EmFeedbackRequest emFeedbackRequest=new EmFeedbackRequest();
			if(level==1)// myfeedback
			{
				emFeedbackRequest.setfeedbackForId(employeeId);
				
			}
			else if(level==2)// ,provider
			{
				emFeedbackRequest.setFeedbackFromId(employeeId);
				
			}else if(level==3)// ,requester
			{
				emFeedbackRequest.setFeedbackRequesterId(employeeId);
				
			}
			
			List<EmFeedbackRequest> feedBackLst=feedbackDao.getFeedbackList(emFeedbackRequest);
			List<EmFeedbackRequestDto> emFeedbackRequestList=null;
			if(feedBackLst!=null && !feedBackLst.isEmpty())
			{
				emFeedbackRequestList=new ArrayList<EmFeedbackRequestDto>();
				List<FeedbackRequestParaMpg> feedbackRequestParaMpgs=null;
				List<FeedbackRequestParaMpgDto> feedbackRequestParaMpgDtos=null;
				FeedbackRequestParaMpgDto mpgDto=null;
				
				EmFeedbackRequestDto emFeedbackRequestDto=new EmFeedbackRequestDto();
				for(EmFeedbackRequest feedbackRequest:feedBackLst)
				{
					emFeedbackRequestDto=new EmFeedbackRequestDto();
					feedbackRequestParaMpgDtos=new ArrayList<FeedbackRequestParaMpgDto>();
					feedbackRequestParaMpgs=feedbackDao.getFeedbackParam(feedbackRequest.getFeedbackRequestId());
					if(feedbackRequestParaMpgs!=null && !feedbackRequestParaMpgs.isEmpty())
					{
						for(FeedbackRequestParaMpg feedbackRequestParaMpg:feedbackRequestParaMpgs)
						{
							mpgDto=new FeedbackRequestParaMpgDto();
							mpgDto.setFeedbackRequestMpgId(feedbackRequestParaMpg.getFeedbackRequestMpgId());
							mpgDto.setParamId(feedbackRequestParaMpg.getParamId());
							mpgDto.setDescription(feedbackRequestParaMpg.getDescription());
							mpgDto.setRating(feedbackRequestParaMpg.getRating());
							mpgDto.setActivateFlag(feedbackRequestParaMpg.getActivateFlag());
							mpgDto.setCreatedDate(feedbackRequestParaMpg.getCreatedDate());
							feedbackRequestParaMpgDtos.add(mpgDto);
						}
						
						emFeedbackRequestDto.setFeedbackParameteres(feedbackRequestParaMpgDtos);
						emFeedbackRequestDto.setProjectId(feedbackRequest.getProjectId());
						emFeedbackRequestDto.setfeedbackForId(feedbackRequest.getfeedbackForId());
						emFeedbackRequestDto.setFeedbackFromId(feedbackRequest.getFeedbackFromId());
						emFeedbackRequestDto.setFeedbackRequesterId(feedbackRequest.getFeedbackRequesterId());
						emFeedbackRequestDto.setFeedbackReply(feedbackRequest.getFeedbackReply());
						emFeedbackRequestDto.setFeedbackStatus(feedbackRequest.getFeedbackStatus());
						emFeedbackRequestDto.setFeedbackRequestId(feedbackRequest.getFeedbackRequestId());
						emFeedbackRequestDto.setBlindRequest(feedbackRequest.getBlindRequest());
						emFeedbackRequestDto.setDescription(feedbackRequest.getDescription());
						emFeedbackRequestDto.setTaskId(feedbackRequest.getTaskId());
						emFeedbackRequestDto.setFeedbackCreatedDate(feedbackRequest.getFeedbackCreatedDate());
						emFeedbackRequestDto.setFeedbackUpdatedDate(feedbackRequest.getFeedbackUpdatedDate());
						emFeedbackRequestList.add(emFeedbackRequestDto);
					}
				}
			}
			responseDTO.setDataObj(emFeedbackRequestList);
			responseDTO.setSuccessMsg("Feedback data sent");
			responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
			
		} catch (Exception e) {
			// TODO: handle exception
			responseDTO.setDataObj(e);
			responseDTO.setErrorMsg(e.getMessage());
			responseDTO.setErrorCode(411);
		}
		return responseDTO;
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.FeedbackService#createFeedbackRequest(com.gomap.performance.organisastion.dto.EmFeedbackRequestDto)
	 */
	@Override
	@Transactional
	public ResponseDTO createFeedbackRequest(EmFeedbackRequestDto emFeedbackRequest) throws Exception {
		// TODO Auto-generated method stub
		logger.info("createFeedbackRequest---------");
		ResponseDTO responseDTO=new ResponseDTO();
		try {
			EmFeedbackRequest emRequest=new EmFeedbackRequest();
			if(emFeedbackRequest.getFeedbackFromId()!=null)
			{
				emRequest.setFeedbackFromId(emFeedbackRequest.getFeedbackFromId());
			}
			if(emFeedbackRequest.getFeedbackRequesterId()!=null)
			{
				emRequest.setFeedbackRequesterId(emFeedbackRequest.getFeedbackRequesterId());
			}if(emFeedbackRequest.getFeedbackReply()!=null)
			{
				emRequest.setFeedbackReply(emFeedbackRequest.getFeedbackReply());
			}if(emFeedbackRequest.getFeedbackStatus()!=null)
			{
				emRequest.setFeedbackStatus(emFeedbackRequest.getFeedbackStatus());
			}
			if(emFeedbackRequest.getfeedbackForId()!=null)
			{
				emRequest.setfeedbackForId(emFeedbackRequest.getfeedbackForId());
			}
			if(emFeedbackRequest.getProjectId()!=null)
			{
				emRequest.setProjectId(emFeedbackRequest.getProjectId());
			}
			if(emFeedbackRequest.getDescription()!=null)
			{
				emRequest.setDescription(emFeedbackRequest.getDescription());
			}
			if(emFeedbackRequest.getTaskId()!=null)
			{
				emRequest.setTaskId(emFeedbackRequest.getTaskId());
			}
			if(emFeedbackRequest.getBlindRequest()!=null)
			{
				emRequest.setBlindRequest(emFeedbackRequest.getBlindRequest());
			}
			emRequest.setActivateFlag(AppConstants.ACTIVE_FLAG);
			emRequest.setFeedbackCreatedDate(new Date());
			feedbackDao.createFeedBackRequest(emRequest);
			
			logger.info("createFeedbackRequest------done---"+emRequest.getFeedbackRequesterId());
			FeedbackRequestParaMpg feedbackRequestParaMpg=new FeedbackRequestParaMpg();
			if(emFeedbackRequest.getFeedbackParameteres()!=null)
			{
				for(FeedbackRequestParaMpgDto dto:emFeedbackRequest.getFeedbackParameteres())
				{
					 feedbackRequestParaMpg=new FeedbackRequestParaMpg();
					 feedbackRequestParaMpg.setParamId(dto.getParamId());
					 feedbackRequestParaMpg.setActivateFlag(AppConstants.ACTIVE_FLAG);
					 feedbackRequestParaMpg.setCreatedDate(new Date());
					 feedbackRequestParaMpg.setFeedbackRequestId(emRequest.getFeedbackRequestId());;
					 feedbackDao.mapFeedbackPara(feedbackRequestParaMpg);
				}
				
			}
			responseDTO.setDataObj(emRequest);
			responseDTO.setSuccessMsg("Feedback request created");
			responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
		} catch (Exception e) {
			// TODO: handle exception
			responseDTO.setDataObj(e);
			responseDTO.setErrorMsg(e.getMessage());
			responseDTO.setErrorCode(411);
			logger.error("error in createFeedbackRequest",e);
		}
		return responseDTO;
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.FeedbackService#deleteFeedback(com.gomap.performance.organisastion.dto.EmFeedbackRequestDto)
	 */
	@Override
	public ResponseDTO deleteFeedback(EmFeedbackRequestDto emFeedbackRequest) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.FeedbackService#provideFeedback(com.gomap.performance.organisastion.dto.EmFeedbackRequestDto)
	 */
	@Override
	@Transactional
	public ResponseDTO provideFeedback(EmFeedbackRequestDto emFeedbackRequest) throws Exception {
		// TODO Auto-generated method stub
		logger.info("createFeedbackRequest---------");
		ResponseDTO responseDTO=new ResponseDTO();
		try {
			EmFeedbackRequest emRequest=new EmFeedbackRequest();
			
			if(emFeedbackRequest.getFeedbackRequestId()!=null)
			{
				emRequest.setFeedbackRequestId(emFeedbackRequest.getFeedbackRequestId());
				List<EmFeedbackRequest> feedBackList = feedbackDao.getFeedbackList(emRequest);
				if (feedBackList.isEmpty()) {
					responseDTO.setDataObj(emFeedbackRequest);
					responseDTO.setErrorMsg("Data is not availabe in  system");
					responseDTO.setErrorCode(411);
				} else {
					emRequest = feedBackList.get(0);
					emRequest.setFeedbackStatus(emFeedbackRequest.getFeedbackStatus());
					if(emFeedbackRequest.getFeedbackStatus()!=null && (AppConstants.SUBMITTED).equals(emFeedbackRequest.getFeedbackStatus()))
					{
						emRequest.setFeedbackGivenDate(new Date());
					}else if(emFeedbackRequest.getFeedbackGivenDate()!=null)
					{
						emRequest.setFeedbackGivenDate(emFeedbackRequest.getFeedbackGivenDate());
					}
					emRequest.setFeedbackUpdatedDate(new Date());
					emRequest.setFeedbackReply(emFeedbackRequest.getFeedbackReply());
					emRequest.setProjectId(emFeedbackRequest.getProjectId());
					emRequest.setTaskId(emFeedbackRequest.getTaskId());
					emRequest.setBlindRequest(emFeedbackRequest.getBlindRequest());
					emRequest.setDescription(emFeedbackRequest.getDescription());
					// update feedbackDao.createFeedBackRequest(emRequest);
					feedbackDao.updateFeedbackRequest(emRequest);

					logger.info("createFeedbackRequest------done---" + emRequest.getFeedbackRequesterId());
					FeedbackRequestParaMpg feedbackRequestParaMpg = new FeedbackRequestParaMpg();
					if (emFeedbackRequest.getFeedbackParameteres() != null) {
						List<FeedbackRequestParaMpg> feedbackRequestParaMpgsDB = feedbackDao
								.getFeedbackParam(emRequest.getFeedbackRequestId());
						for (FeedbackRequestParaMpgDto dto : emFeedbackRequest.getFeedbackParameteres()) {

							for (FeedbackRequestParaMpg feedBack : feedbackRequestParaMpgsDB) {
								if (dto.getFeedbackRequestMpgId().equals(feedBack.getFeedbackRequestMpgId())) {
									if (dto.getRating() != null) {
										feedBack.setRating(dto.getRating());
									}
									if (dto.getDescription() != null) {
										feedBack.setDescription(dto.getDescription());
									}
									feedBack.setUpdatedDate(new Date());
									
									feedbackDao.mapFeedbackPara(feedBack);
									break;
								}
							}
						}

					}
					responseDTO.setDataObj(emFeedbackRequest);
					responseDTO.setErrorMsg("Feedback sent successfuly");
					responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
				}
			}else {responseDTO.setDataObj(emFeedbackRequest);
			responseDTO.setErrorMsg("Feedback requestid is mandatory");
			responseDTO.setErrorCode(411);}
			
			
			
			
			
		} catch (Exception e) {
			// TODO: handle exception
			responseDTO.setDataObj(e);
			responseDTO.setErrorMsg(e.getMessage());
			responseDTO.setErrorCode(411);
			logger.error("error in createFeedbackRequest",e);
		}
		return responseDTO;
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.FeedbackService#getFeedback(com.gomap.performance.organisastion.dto.EmFeedbackRequestDto)
	 */
	@Override
	@Transactional
	public ResponseDTO getFeedback(EmFeedbackRequestDto emFeedbackRequest) throws Exception {
		// TODO Auto-generated method stub
		logger.info("getFeedback---------");
		ResponseDTO responseDTO=new ResponseDTO();
		try {
			EmFeedbackRequest emRequest=new EmFeedbackRequest();
			if(emFeedbackRequest.getFeedbackFromId()!=null)
			{
				emRequest.setFeedbackFromId(emFeedbackRequest.getFeedbackFromId());
			}
			if(emFeedbackRequest.getFeedbackRequesterId()!=null)
			{
				emRequest.setFeedbackRequesterId(emFeedbackRequest.getFeedbackRequesterId());
			}if(emFeedbackRequest.getFeedbackReply()!=null)
			{
				emRequest.setFeedbackReply(emFeedbackRequest.getFeedbackReply());
			}if(emFeedbackRequest.getFeedbackStatus()!=null)
			{
				emRequest.setFeedbackStatus(emFeedbackRequest.getFeedbackStatus());
			}
			if(emFeedbackRequest.getfeedbackForId()!=null)
			{
				emRequest.setfeedbackForId(emFeedbackRequest.getfeedbackForId());
			}
			if(emFeedbackRequest.getProjectId()!=null)
			{
				emRequest.setProjectId(emFeedbackRequest.getProjectId());
			}
			if(emFeedbackRequest.getDescription()!=null)
			{
				emRequest.setDescription(emFeedbackRequest.getDescription());
			}
			if(emFeedbackRequest.getTaskId()!=null)
			{
				emRequest.setTaskId(emFeedbackRequest.getTaskId());
			}
			if(emFeedbackRequest.getBlindRequest()!=null)
			{
				emRequest.setBlindRequest(emFeedbackRequest.getBlindRequest());
			}
			if(emFeedbackRequest.getFeedbackCreatedDate()!=null)
			{
				emRequest.setFeedbackCreatedDate(emFeedbackRequest.getFeedbackCreatedDate());
			}
			List<EmFeedbackRequest> feedBackLst=feedbackDao.getFeedbackList(emRequest);
			List<EmFeedbackRequestDto> emFeedbackRequestList=null;
			if(feedBackLst!=null && !feedBackLst.isEmpty())
			{
				emFeedbackRequestList=new ArrayList<EmFeedbackRequestDto>();
				List<FeedbackRequestParaMpg> feedbackRequestParaMpgs=null;
				List<FeedbackRequestParaMpgDto> feedbackRequestParaMpgDtos=null;
				FeedbackRequestParaMpgDto mpgDto=null;
				
				EmFeedbackRequestDto emFeedbackRequestDto=new EmFeedbackRequestDto();
				for(EmFeedbackRequest feedbackRequest:feedBackLst)
				{
					emFeedbackRequestDto=new EmFeedbackRequestDto();
					feedbackRequestParaMpgDtos=new ArrayList<FeedbackRequestParaMpgDto>();
					feedbackRequestParaMpgs=feedbackDao.getFeedbackParam(feedbackRequest.getFeedbackRequestId());
					if(feedbackRequestParaMpgs!=null && !feedbackRequestParaMpgs.isEmpty())
					{
						for(FeedbackRequestParaMpg feedbackRequestParaMpg:feedbackRequestParaMpgs)
						{
							mpgDto=new FeedbackRequestParaMpgDto();
							mpgDto.setFeedbackRequestMpgId(feedbackRequestParaMpg.getFeedbackRequestMpgId());
							mpgDto.setParamId(feedbackRequestParaMpg.getParamId());
							mpgDto.setDescription(feedbackRequestParaMpg.getDescription());
							mpgDto.setRating(feedbackRequestParaMpg.getRating());
							mpgDto.setActivateFlag(feedbackRequestParaMpg.getActivateFlag());
							mpgDto.setCreatedDate(feedbackRequestParaMpg.getCreatedDate());
							feedbackRequestParaMpgDtos.add(mpgDto);
						}
					
						emFeedbackRequestDto.setFeedbackParameteres(feedbackRequestParaMpgDtos);
						emFeedbackRequestDto.setProjectId(feedbackRequest.getProjectId());
						emFeedbackRequestDto.setfeedbackForId(feedbackRequest.getfeedbackForId());
						emFeedbackRequestDto.setFeedbackFromId(feedbackRequest.getFeedbackFromId());
						emFeedbackRequestDto.setFeedbackRequesterId(feedbackRequest.getFeedbackRequesterId());
						emFeedbackRequestDto.setFeedbackReply(feedbackRequest.getFeedbackReply());
						emFeedbackRequestDto.setFeedbackStatus(feedbackRequest.getFeedbackStatus());
						emFeedbackRequestDto.setFeedbackRequestId(feedbackRequest.getFeedbackRequestId());
						emFeedbackRequestDto.setBlindRequest(feedbackRequest.getBlindRequest());
						emFeedbackRequestDto.setDescription(feedbackRequest.getDescription());
						emFeedbackRequestDto.setTaskId(feedbackRequest.getTaskId());
						emFeedbackRequestDto.setFeedbackCreatedDate(feedbackRequest.getFeedbackCreatedDate());
						emFeedbackRequestDto.setFeedbackUpdatedDate(feedbackRequest.getFeedbackUpdatedDate());
						emFeedbackRequestList.add(emFeedbackRequestDto);
					}
				}
			}
			responseDTO.setDataObj(emFeedbackRequestList);
			responseDTO.setSuccessMsg("Feedback data sent");
			responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
			
			
			
		} catch (Exception e) {
			// TODO: handle exception
			responseDTO.setDataObj(e);
			responseDTO.setErrorMsg(e.getMessage());
			responseDTO.setErrorCode(411);
			logger.error("error in getFeedback",e);
		}
		return responseDTO;
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.FeedbackService#provideFeedbackEvalution(com.gomap.performance.organisastion.dto.EmFeedbackRequestDto)
	 */
	@Override
	@Transactional
	public ResponseDTO provideFeedbackEvalution(Integer employeeId) {
		// TODO Auto-generated method stub
		logger.info("provideFeedbackEvalution---------");
		ResponseDTO responseDTO=new ResponseDTO();
		try {
			EmFeedbackRequest emRequest=new  EmFeedbackRequest();
			emRequest.setfeedbackForId(employeeId);
			List<FeedbackEvaluation> objList=feedbackDao.getFeedbackRatings(employeeId);
			HashMap<Long,FeedbackEvaluation> myMap=new HashMap<Long, FeedbackEvaluation>();
			List<FeedbackEvaluation> evalutionList=null;
			List<Reviewer> reviewers=null;
			Reviewer reviewerObj=null;
			evalutionList=new ArrayList<FeedbackEvaluation>();
			if(objList!=null && !objList.isEmpty())
			{
				for(FeedbackEvaluation evaluation:objList)
				{
					reviewerObj=new Reviewer();
					if(myMap.containsKey(evaluation.getParamId()))
					{
						FeedbackEvaluation ev=myMap.get(evaluation.getParamId());
						reviewerObj=evaluation.getReview();
						ev.getReviewer().add(reviewerObj);
						
						myMap.put(evaluation.getParamId(), ev);
						
					}else
					{
						reviewers=new ArrayList<Reviewer>();
						reviewers.add(evaluation.getReview());
						evaluation.setReviewer(reviewers);
						myMap.put(evaluation.getParamId(), evaluation);
					}
				} 
				
				int rating=0;
				double count=0;
				double avaRat=0;
				if(myMap!=null)
				{
					for(FeedbackEvaluation eva1:myMap.values())
					{
						avaRat=0;
						if(eva1.getReviewer()!=null)
						{
							for(Reviewer rw:eva1.getReviewer())
							{
								count++;
								rating=rating+rw.getRating();
							}
							avaRat=rating/count;
							eva1.setReview(null);
							eva1.setAverageRating(avaRat);
						}
						evalutionList.add(eva1);
					}
				}
				responseDTO.setDataObj(evalutionList);
				responseDTO.setSuccessMsg("Feedback data sent");
				responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
				
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			responseDTO.setDataObj(e);
			responseDTO.setErrorMsg(e.getMessage());
			responseDTO.setErrorCode(411);
			logger.error("error in getFeedback",e);
		}
		return responseDTO;
	}

}

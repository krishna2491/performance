/**
 * Generated By Krishnakant Bairagi
 */
package com.gomap.performance.organisastion.service.impl;


import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.gomap.performance.organisastion.dto.ResponseDTO;
import com.gomap.performance.organisastion.dto.RoleElementOperationMpgDto;
import com.gomap.performance.organisastion.enumorg.ErrorCodeEnums;
import com.gomap.performance.master.constant.AppConstants;
import com.gomap.performance.organisastion.dao.DepartmentAndDesignationDao;
import com.gomap.performance.organisastion.dao.impl.DepartmentAndDesignationDaoImpl;
import com.gomap.performance.organisastion.dto.DepartmentDto;
import com.gomap.performance.organisastion.dto.DesignationDto;
import com.gomap.performance.organisastion.dto.DesignationElementMapingDto;
import com.gomap.performance.organisastion.dto.ElementMasterDto;
import com.gomap.performance.organisastion.dto.OperationMasterDto;
import com.gomap.performance.organisastion.model.DesignationElementMaping;
import com.gomap.performance.organisastion.model.EmDepartment;
import com.gomap.performance.organisastion.model.EmDesignation;
import com.gomap.performance.organisastion.model.RoleElementOperationMpg;
import com.gomap.performance.organisastion.service.DepartmentAndDesignationService;

/**
 * @author krishnakant.bairagi
 *
 */
@Service
public class DepartmentAndDesignationServiceImpl implements DepartmentAndDesignationService {
	private static final Logger logger = LoggerFactory.getLogger(DepartmentAndDesignationServiceImpl.class);

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.DepartmentAndDesignationService#createDepartment(DepartmentDto)
	 */
	@Autowired
	private DepartmentAndDesignationDao departmentAndDesignationDao;
	@Override
	@Transactional
	public ResponseDTO createDepartment(DepartmentDto departmentDto)
			throws Exception {
		ResponseDTO responseDTO=new ResponseDTO();
		try {
			logger.debug("creating department");
			EmDepartment emDepartment=new EmDepartment();
			
			emDepartment.setActivateFlag(1);
			emDepartment.setDepartmentCreatedDate(new Date());
			emDepartment.setDepartmentName(departmentDto.getDepartmentName());
			
			departmentAndDesignationDao.createDepartment(emDepartment);
			responseDTO.setDataObj(emDepartment);
			responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
		} catch (Exception e) {
			// TODO: handle exception
			responseDTO.setErrorCode(411);
			responseDTO.setErrorMsg(e.getMessage());
			logger.error("Getting Error while creating department");
		}
		// TODO Auto-generated method stub
		return responseDTO;
	}
	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.DepartmentAndDesignationService#createDesignation(com.gomap.performance.organisastion.dto.DesignationDto)
	 */
	@Override
	@Transactional
	public ResponseDTO createDesignation(DesignationDto designationDto) throws Exception {
		ResponseDTO responseDTO=new ResponseDTO();
		try {
			logger.debug("createDesignation");
			EmDesignation emDesignation=new EmDesignation();
			
			emDesignation.setDesignationCreatedDate(new Date());
			
			
			if(designationDto.getDesignationLevelNo()!=null)
			{
				emDesignation.setDesignationLevelNo(designationDto.getDesignationLevelNo());
			}
			
			if(designationDto.getDesignationName()!=null)
			{
				emDesignation.setDesignationName(designationDto.getDesignationName());
			}
			if(designationDto.getParentDesignationId()!=null)
			{
				emDesignation.setParentDesignationId(designationDto.getParentDesignationId());
			}
			if(designationDto.getDepartmentId()!=null)
			{
				emDesignation.setDepartmentId(designationDto.getDepartmentId());
					
			}else {
				responseDTO.setErrorMsg("Department id can not be blank");
				
			}
			
			emDesignation.setActivateFlag(AppConstants.ACTIVE_FLAG);	
			departmentAndDesignationDao.createDesignation(emDesignation);
			
			if(designationDto.getDesignationElementMappingList()!=null)
			{
				DesignationElementMaping designationElementMaping=null;
				for(DesignationElementMapingDto designationElementMapingDto:designationDto.getDesignationElementMappingList())
				{
					designationElementMaping=new DesignationElementMaping();
					
					designationElementMaping.setDesignationId(emDesignation.getDesignationId());
					designationElementMaping.setElementId(designationElementMapingDto.getElementId());
					designationElementMaping.setActivateFlag(AppConstants.ACTIVE_FLAG);
					designationElementMaping.setCreatedDate(new Date());
					departmentAndDesignationDao.mapDesignationElement(designationElementMaping);
					
					if(designationElementMapingDto.getRoleElementOprationList()!=null)
					{
						//for(OperationMaster)
						for(RoleElementOperationMpgDto roleElementOperationMpgDto:designationElementMapingDto.getRoleElementOprationList())
						{
							RoleElementOperationMpg roleElementOperationMpg=new RoleElementOperationMpg();
							roleElementOperationMpg.setOperationId(roleElementOperationMpgDto.getOperationId());
							roleElementOperationMpg.setActivateFlag(AppConstants.ACTIVE_FLAG);
							roleElementOperationMpg.setDesignationElementMpgId(designationElementMaping.getDesignationElementMpgId());
							roleElementOperationMpg.setCreatedDate(new Date());
							departmentAndDesignationDao.mapOperation(roleElementOperationMpg);
							
						}
						
					}
				}
			}
			
			
			responseDTO.setDataObj(emDesignation);
			responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
		} catch (Exception e) {
			// TODO: handle exception
			responseDTO.setErrorCode(411);
			responseDTO.setErrorMsg(e.getMessage());
			logger.error("Getting Error while creating Designation");
		}
		// TODO Auto-generated method stub
		return responseDTO;
	}
	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.DepartmentAndDesignationService#updateDepartment(com.gomap.performance.organisastion.dto.DepartmentDto)
	 */
	@Override
	@Transactional
	public ResponseDTO updateDepartment(DepartmentDto departmentDto) throws Exception {
		// TODO Auto-generated method stub

		logger.debug("start  updateDepartment for departmentId="+departmentDto.getDepartmentId());
		ResponseDTO responseDTO=new ResponseDTO();
		try {
			if(departmentDto!=null && departmentDto.getDepartmentId()!=null)
			{
				responseDTO.setErrorCode(411);
				responseDTO.setErrorMsg("Department parameter can not be null");
			}else
			{
				List<EmDepartment> deptList=departmentAndDesignationDao.getDepartment(departmentDto.getDepartmentId());
				if(deptList.isEmpty())
				{
					responseDTO.setErrorCode(412);
					responseDTO.setErrorMsg("Department data is not availabe in system");
				}else
				{
					EmDepartment department=deptList.get(0);
					if(departmentDto.getDepartmentName()!=null && !("").equals(departmentDto.getDepartmentName()))
					{
						department.setDepartmentName(departmentDto.getDepartmentName());
						department.setDepartmentUpdatedDate(new Date());
						departmentAndDesignationDao.updateDepartment(department);
						responseDTO.setDataObj(department);
						responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
					}
						
				}
				
				
			}
			
			
			responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
		} catch (Exception e) {
			// TODO: handle exception
			responseDTO.setErrorCode(411);
			responseDTO.setErrorMsg(e.getMessage());
			logger.error(" Error while updating department");
		}
		// TODO Auto-generated method stub
		return responseDTO;
	
	
	
	}
	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.DepartmentAndDesignationService#updateDesignation(com.gomap.performance.organisastion.dto.DesignationDto)
	 */
	@Override
	@Transactional
	public ResponseDTO updateDesignation(DesignationDto designationDto) throws Exception {
		logger.debug("start  updateDesignation for designationId=" + designationDto.getDesignationId());
		ResponseDTO responseDTO = new ResponseDTO();
		try {
			if (designationDto != null && designationDto.getDesignationId() != null) {
				responseDTO.setErrorCode(411);
				responseDTO.setErrorMsg("Designation parameter can not be null");
			} else {
				List<EmDesignation> designalationList = departmentAndDesignationDao
						.getDesignation(designationDto.getDesignationId(),null);
				
				
				if (designalationList.isEmpty()) {
					responseDTO.setErrorCode(412);
					responseDTO.setErrorMsg("Designation data is not availabe in system");
				} else {
					EmDesignation emDesignation = designalationList.get(0);
					if (emDesignation!=null) {
						if(designationDto.getDesignationLevelNo()!=null)
						{
							emDesignation.setDesignationLevelNo(designationDto.getDesignationLevelNo());
						}
						
						if(designationDto.getDesignationName()!=null)
						{
							emDesignation.setDesignationName(designationDto.getDesignationName());
						}
						if(designationDto.getParentDesignationId()!=null)
						{
							emDesignation.setParentDesignationId(designationDto.getParentDesignationId());
						}
						if(designationDto.getDepartmentId()!=null)
						{
							emDesignation.setDepartmentId(designationDto.getDepartmentId());
								
						}else {
							responseDTO.setErrorMsg("Department id can not be blank");
							
						}
				
						emDesignation.setDesignationUpdatedDate(new Date());
						departmentAndDesignationDao.updateDesignation(emDesignation);
						
						if(designationDto.getDesignationElementMappingList()!=null)
						{
							DesignationElementMaping designationElementMaping=null;
							
							for(DesignationElementMapingDto designationElementMapingDto:designationDto.getDesignationElementMappingList())
							{
								if(designationElementMapingDto.getDesignationElementMpgId()==null)
								{
									// insert new element
									// then store data for operation

										designationElementMaping=new DesignationElementMaping();
										
										designationElementMaping.setDesignationId(emDesignation.getDesignationId());
										designationElementMaping.setElementId(designationElementMapingDto.getElementId());
										designationElementMaping.setActivateFlag(AppConstants.ACTIVE_FLAG);
										designationElementMaping.setCreatedDate(new Date());
										departmentAndDesignationDao.mapDesignationElement(designationElementMaping);
										
										if(designationElementMapingDto.getRoleElementOprationList()!=null)
										{
											//for(OperationMaster)
											for(RoleElementOperationMpgDto roleElementOperationMpgDto:designationElementMapingDto.getRoleElementOprationList())
											{
												RoleElementOperationMpg roleElementOperationMpg=new RoleElementOperationMpg();
												roleElementOperationMpg.setOperationId(roleElementOperationMpgDto.getOperationId());
												roleElementOperationMpg.setActivateFlag(AppConstants.ACTIVE_FLAG);
												roleElementOperationMpg.setDesignationElementMpgId(designationElementMaping.getDesignationElementMpgId());
												roleElementOperationMpg.setCreatedDate(new Date());
												departmentAndDesignationDao.mapOperation(roleElementOperationMpg);
												
											}
											
										}
									
								
								}else {
									if(designationElementMapingDto.getRoleElementOprationList()!=null)
									{
										for(RoleElementOperationMpgDto roleElementOperationMpgDto:designationElementMapingDto.getRoleElementOprationList())
										{
											if(roleElementOperationMpgDto.getRoleElementOperationId()==null)
											{
												RoleElementOperationMpg roleElementOperationMpg=new RoleElementOperationMpg();
												roleElementOperationMpg.setOperationId(roleElementOperationMpgDto.getOperationId());
												roleElementOperationMpg.setActivateFlag(AppConstants.IN_ACTIVE_FLAG);
												roleElementOperationMpg.setDesignationElementMpgId(designationElementMapingDto.getDesignationElementMpgId());
												roleElementOperationMpg.setCreatedDate(new Date());
												departmentAndDesignationDao.mapOperation(roleElementOperationMpg);
												
												// insert new  operation
											}else
											{
												if(roleElementOperationMpgDto.getActivateFlag().equals(AppConstants.IN_ACTIVE_FLAG))
												{
													//inactive operation here
													RoleElementOperationMpg roleElementOperationMpg=new RoleElementOperationMpg();
													roleElementOperationMpg.setOperationId(roleElementOperationMpgDto.getOperationId());
													roleElementOperationMpg.setActivateFlag(AppConstants.IN_ACTIVE_FLAG);
													roleElementOperationMpg.setDesignationElementMpgId(designationElementMaping.getDesignationElementMpgId());
													roleElementOperationMpg.setUpdatedDate(new Date());
													departmentAndDesignationDao.mapOperation(roleElementOperationMpg);
													
												}
											}
										}
									}
								}
							}
						}
						responseDTO.setDataObj(emDesignation);
						responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
					}

				}

			}

			responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
		} catch (Exception e) {
			// TODO: handle exception
			responseDTO.setErrorCode(411);
			responseDTO.setErrorMsg(e.getMessage());
			logger.error(" Error while updating department");
		}
		// TODO Auto-generated method stub
		return responseDTO;

	}
	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.DepartmentAndDesignationService#deleteDepartment(com.gomap.performance.organisastion.dto.DepartmentDto)
	 */
	@Override
	@Transactional
	public ResponseDTO deleteDepartment(DepartmentDto departmentDto) throws Exception {
		logger.debug("start  deleteDepartment for departmentId=" + departmentDto.getDepartmentId());
		ResponseDTO responseDTO = new ResponseDTO();
		try {
			if (departmentDto != null && departmentDto.getDepartmentId() != null) {
				responseDTO.setErrorCode(411);
				responseDTO.setErrorMsg("Department parameter can not be null");
			} else {
				List<EmDepartment> deptList = departmentAndDesignationDao
						.getDepartment(departmentDto.getDepartmentId());
				if (deptList.isEmpty()) {
					responseDTO.setErrorCode(412);
					responseDTO.setErrorMsg("Department data is not availabe in system");
				} else {
					EmDepartment department = deptList.get(0);
					if (departmentDto.getDepartmentName() != null && !("").equals(departmentDto.getDepartmentName())) {
						department.setActivateFlag(AppConstants.IN_ACTIVE_FLAG);
						department.setDepartmentUpdatedDate(new Date());
						departmentAndDesignationDao.updateDepartment(department);
						responseDTO.setDataObj(department);
						responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
					}

				}

			}

			responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
		} catch (Exception e) {
			// TODO: handle exception
			responseDTO.setErrorCode(411);
			responseDTO.setErrorMsg(e.getMessage());
			logger.error(" Error while updating department");
		}
		// TODO Auto-generated method stub
		return responseDTO;

	}
	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.DepartmentAndDesignationService#deleteDesignation(com.gomap.performance.organisastion.dto.DesignationDto)
	 */
	@Override
	@Transactional
	public ResponseDTO deleteDesignation(DesignationDto designationDto) throws Exception {
		logger.debug("start  deleteDesignation for designationId=" + designationDto.getDesignationId());
		ResponseDTO responseDTO = new ResponseDTO();
		try {
			if (designationDto != null && designationDto.getDesignationId() != null) {
				responseDTO.setErrorCode(411);
				responseDTO.setErrorMsg("Designation parameter can not be null");
			} else {
				List<EmDesignation> designalationList = departmentAndDesignationDao
						.getDesignation(designationDto.getDesignationId(),null);
				if (designalationList.isEmpty()) {
					responseDTO.setErrorCode(412);
					responseDTO.setErrorMsg("Designation data is not availabe in system");
				} else {
					EmDesignation emDesignation = designalationList.get(0);
					if (emDesignation!=null) {
						emDesignation.setActivateFlag(AppConstants.IN_ACTIVE_FLAG);
						emDesignation.setDesignationUpdatedDate(new Date());
						departmentAndDesignationDao.updateDesignation(emDesignation);
						responseDTO.setDataObj(emDesignation);
						responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
					}

				}

			}

			responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
		} catch (Exception e) {
			// TODO: handle exception
			responseDTO.setErrorCode(411);
			responseDTO.setErrorMsg(e.getMessage());
			logger.error(" Error while updating department");
		}
		// TODO Auto-generated method stub
		return responseDTO;

	}
	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.DepartmentAndDesignationService#getDepartment(java.lang.Integer)
	 */
	@Override
	@Transactional
	public ResponseDTO getDepartment(Integer departmentId) throws Exception {

		ResponseDTO responseDTO=new ResponseDTO();
		try {
			logger.debug("getting department departmentId="+departmentId);
			List<EmDepartment> departmetList=departmentAndDesignationDao.getDepartment(departmentId);
			responseDTO.setDataObj(departmetList);
			responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
		} catch (Exception e) {
			// TODO: handle exception
			responseDTO.setErrorCode(411);
			responseDTO.setErrorMsg(e.getMessage());
			logger.error(" Error while getting department");
		}
		// TODO Auto-generated method stub
		return responseDTO;
	
	}
	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.DepartmentAndDesignationService#getDesignation(java.lang.Integer)
	 */
	@Override
	@Transactional
	public ResponseDTO getDesignation(Integer designationId,Integer departmentId) throws Exception {

		ResponseDTO responseDTO=new ResponseDTO();
		try {
			logger.debug("getting Designation designationId="+designationId);
			List<EmDesignation> designationList=departmentAndDesignationDao.getDesignation(designationId, departmentId);
			responseDTO.setDataObj(designationList);
			responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
		} catch (Exception e) {
			// TODO: handle exception
			responseDTO.setErrorCode(411);
			responseDTO.setErrorMsg(e.getMessage());
			logger.error(" Error while getting Designation");
		}
		// TODO Auto-generated method stub
		return responseDTO;
	
	}
	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.service.DepartmentAndDesignationService#getDesignationWithElements(java.lang.Integer)
	 */
	@Override
	@Transactional
	public ResponseDTO getDesignationWithElements(Integer designationId) throws Exception {
		// TODO Auto-generated method stub
		logger.info("getting getDesignationWithElements designationId="+designationId);
		ResponseDTO responseDTO=new ResponseDTO();
		try {
			
			List<DesignationElementMaping> designationElementMapings=departmentAndDesignationDao.getDesignationElement(designationId);
			DesignationElementMapingDto designationElementMapingDto=new DesignationElementMapingDto();
			List<RoleElementOperationMpgDto> operationMasterDtos=new ArrayList<RoleElementOperationMpgDto>();
			List<DesignationElementMapingDto> designationElementMapingDtos=new ArrayList<DesignationElementMapingDto>();
			DesignationElementMapingDto designationElementMapingDto2=new DesignationElementMapingDto();
			RoleElementOperationMpgDto elementOperationMpgDto=new RoleElementOperationMpgDto();
			DesignationDto designationDto=new DesignationDto();
			designationDto.setDesignationId(designationId);
			for(DesignationElementMaping designationElementMaping:designationElementMapings)
			{
				operationMasterDtos = new ArrayList<RoleElementOperationMpgDto>();
				designationElementMapingDto2 = new DesignationElementMapingDto();
				List<RoleElementOperationMpg> masterDtos = departmentAndDesignationDao
						.getDesignationElementOperation(designationElementMaping.getDesignationElementMpgId());
				if (masterDtos != null && !masterDtos.isEmpty()) {
					for (RoleElementOperationMpg elementOperationMpg : masterDtos) {

						elementOperationMpgDto = new RoleElementOperationMpgDto();
						elementOperationMpgDto
								.setDesignationElementMpgId(elementOperationMpg.getDesignationElementMpgId());
						elementOperationMpgDto.setOperationId(elementOperationMpg.getOperationId());
						elementOperationMpgDto
								.setRoleElementOperationId(elementOperationMpg.getRoleElementOperationId());
						operationMasterDtos.add(elementOperationMpgDto);
					}
					designationElementMapingDto2.setRoleElementOprationList(operationMasterDtos);
					designationElementMapingDto2.setDesignationId(designationElementMaping.getDesignationId());
					designationElementMapingDto2.setElementId(designationElementMaping.getElementId());
					designationElementMapingDto2
							.setDesignationElementMpgId(designationElementMaping.getDesignationElementMpgId());
					designationElementMapingDtos.add(designationElementMapingDto2);
				}
			}
			designationDto.setDesignationElementMappingList(designationElementMapingDtos);
			responseDTO.setDataObj(designationDto);
			responseDTO.setSuccessMsg("Data sent");
			responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
			
		} catch (Exception e) {
			// TODO: handle exception
			responseDTO.setDataObj(e);
			responseDTO.setErrorMsg(e.getMessage());
			responseDTO.setErrorCode(411);
		}
		return responseDTO;
	}
		}

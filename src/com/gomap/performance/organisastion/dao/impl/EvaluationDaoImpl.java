/**
 * Generated By Krishnakant Bairagi
 */
package com.gomap.performance.organisastion.dao.impl;

import java.util.Date;
import java.util.List;

import javax.transaction.Transactional;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Disjunction;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.gomap.performance.master.constant.AppConstants;
import com.gomap.performance.organisastion.dao.EvaluationDao;
import com.gomap.performance.organisastion.model.EmployeePerformanceMaster;
import com.gomap.performance.organisastion.model.EvalutionPeriodMaster;


/**
 * @author Fujitsu
 *
 */
@Repository
public class EvaluationDaoImpl implements EvaluationDao {

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.EvaluationDao#createPeriod(com.gomap.performance.organisastion.model.EvalutionPeriodMaster)
	 */
	
	@Autowired
	private SessionFactory sessionFactory;
	
	@Override
	public EvalutionPeriodMaster createPeriod(EvalutionPeriodMaster evalutionPeriodMaster) throws Exception {
		// TODO Auto-generated method stub
		sessionFactory.getCurrentSession().save(evalutionPeriodMaster);
		return evalutionPeriodMaster;
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.EvaluationDao#updatePeriod(com.gomap.performance.organisastion.model.EvalutionPeriodMaster)
	 */
	@Override
	public EvalutionPeriodMaster updatePeriod(EvalutionPeriodMaster evalutionPeriodMaster) throws Exception {
		// TODO Auto-generated method stub
		sessionFactory.getCurrentSession().update(evalutionPeriodMaster);
		return evalutionPeriodMaster;
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.EvaluationDao#getPeriod(com.gomap.performance.organisastion.model.EvalutionPeriodMaster)
	 */
	@Override
	public List<EvalutionPeriodMaster> getPeriod(EvalutionPeriodMaster evalutionPeriodMaster) throws Exception {
		// TODO Auto-generated method stub
		Criteria crit=sessionFactory.getCurrentSession().createCriteria(EvalutionPeriodMaster.class);
		if(evalutionPeriodMaster.getStartDate()!= null && evalutionPeriodMaster.getEndDate()!=null)
		{
			crit.add(Restrictions.gt("startDate", evalutionPeriodMaster.getStartDate()));
			crit.add(Restrictions.lt("endDate", evalutionPeriodMaster.getEndDate()));
			
//			Disjunction or = Restrictions.disjunction();
//			or.add(Restrictions.gt("startDate",evalutionPeriodMaster.getStartDate()));
//			or.add(Restrictions.lt("startDate",evalutionPeriodMaster.getEndDate()));
			
//			or.add(Restrictions.lt("endDate", evalutionPeriodMaster.getEndDate()));
//			or.add(Restrictions.gt("endDate", evalutionPeriodMaster.getStartDate()));
			
			
		}
		if(evalutionPeriodMaster.getPerformancePeriodId()!=null)
		{
			crit.add(Restrictions.eq("performancePeriodId",evalutionPeriodMaster.getPerformancePeriodId()));
		}
		crit.add(Restrictions.eq("activateFlag",AppConstants.ACTIVE_FLAG));
		return crit.list();
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.EvaluationDao#storeEvalution(com.gomap.performance.organisastion.model.EmployeePerformanceMaster)
	 */
	@Override
	public EmployeePerformanceMaster storeEvalution(EmployeePerformanceMaster employeePerformanceMaster)
			throws Exception {
		// TODO Auto-generated method stub
		sessionFactory.getCurrentSession().save(employeePerformanceMaster);
		return employeePerformanceMaster;
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.EvaluationDao#getEvalution(java.lang.Integer, java.lang.Integer)
	 */
	@Override
	public List<EmployeePerformanceMaster> getEvalution(Integer employeeId, Integer evaluterId,Integer durationId,Integer mstId) throws Exception {
		// TODO Auto-generated method stub
		Criteria crit=sessionFactory.getCurrentSession().createCriteria(EmployeePerformanceMaster.class);
		if(employeeId!=null)
		{
			crit.add(Restrictions.eq("employeeId", employeeId));
			
		}
		if(evaluterId!=null)
		{
			crit.add(Restrictions.eq("evaluaterId", evaluterId));	
		}
		if(durationId!=null)
		{
			crit.add(Restrictions.eq("performancePeriodId", durationId));	
		}
		if(mstId!=null)
		{
			crit.add(Restrictions.eq("performaceMstId", mstId));	
		}
		crit.add(Restrictions.eq("activateFlag",AppConstants.ACTIVE_FLAG));
		return crit.list();
		
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.EvaluationDao#updateEvalution(com.gomap.performance.organisastion.model.EmployeePerformanceMaster)
	 */
	@Override
	public EmployeePerformanceMaster updateEvalution(EmployeePerformanceMaster employeePerformanceMaster)
			throws Exception {
		sessionFactory.getCurrentSession().update(employeePerformanceMaster);
		return employeePerformanceMaster;
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.EvaluationDao#getPeriodHql(com.gomap.performance.organisastion.model.EvalutionPeriodMaster)
	 */
	@Override
	public List<EvalutionPeriodMaster> getPeriodHql(EvalutionPeriodMaster evalutionPeriodMaster) throws Exception {
		// TODO Auto-generated method stub
		Query query=sessionFactory.getCurrentSession().createQuery("");  
		StringBuilder bd=new StringBuilder("from EvalutionPeriodMaster where activateFlag=1 ");
		if(evalutionPeriodMaster.getStartDate()!=null)
		{
			bd.append(" and startDate>="+evalutionPeriodMaster.getStartDate() + " or endDate<="+evalutionPeriodMaster.getEndDate());
					//+ "  and endDate<="+new Date(evalutionPeriodMaster.getEndDate()));
		}
		return query.list();
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.EvaluationDao#checkEvalution(java.lang.Integer, java.lang.Integer, java.lang.Integer)
	 */
	@Override
	public EmployeePerformanceMaster checkEvalution(Integer employeeId, Integer evaluterId, Integer periodId)
			throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.EvaluationDao#getCurrentPeriod(com.gomap.performance.organisastion.model.EvalutionPeriodMaster)
	 */
	@Override
	public List<EvalutionPeriodMaster> getCurrentPeriod() throws Exception {Criteria crit=sessionFactory.getCurrentSession().createCriteria(EvalutionPeriodMaster.class);
	
		crit.add(Restrictions.lt("startDate", new Date()));
		crit.add(Restrictions.gt("endDate", new Date()));
		
//		Disjunction or = Restrictions.disjunction();
//		or.add(Restrictions.gt("startDate",evalutionPeriodMaster.getStartDate()));
//		or.add(Restrictions.lt("startDate",evalutionPeriodMaster.getEndDate()));
		
//		or.add(Restrictions.lt("endDate", evalutionPeriodMaster.getEndDate()));
//		or.add(Restrictions.gt("endDate", evalutionPeriodMaster.getStartDate()));
		
		
	
	
	crit.add(Restrictions.eq("activateFlag",AppConstants.ACTIVE_FLAG));
	return crit.list();}

}

/**
 * Generated By Krishnakant Bairagi
 */
package com.gomap.performance.organisastion.dao.impl;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.gomap.performance.master.constant.AppConstants;
import com.gomap.performance.organisastion.dao.SkillDao;
import com.gomap.performance.organisastion.model.EmEmployeeSkillMpg;
import com.gomap.performance.organisastion.model.EmSkill;

/**
 * @author krishnakant.bairagi
 *
 */
@Repository
public class SkillDaoImpl implements SkillDao {

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.gomap.performance.organisastion.dao.SkillDao#createSkill(com.gomap.
	 * performance.organisastion.model.EmSkill)
	 */
	@Autowired
	private SessionFactory sessionfactory;

	@Override
	public void createSkill(EmSkill emSkill) throws Exception {
		// TODO Auto-generated method stub
		sessionfactory.getCurrentSession().save(emSkill);

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.gomap.performance.organisastion.dao.SkillDao#updateSkill(com.gomap.
	 * performance.organisastion.model.EmSkill)
	 */
	@Override
	public void updateSkill(EmSkill emSkill) throws Exception {
		// TODO Auto-generated method stub
		sessionfactory.getCurrentSession().update(emSkill);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.gomap.performance.organisastion.dao.SkillDao#deleteSkill(com.gomap.
	 * performance.organisastion.model.EmSkill)
	 */
	@Override
	public void deleteSkill(EmSkill emSkill) throws Exception {
		// TODO Auto-generated method stub
		updateSkill(emSkill);

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.gomap.performance.organisastion.dao.SkillDao#getSkill(com.gomap.
	 * performance.organisastion.model.EmSkill)
	 */
	@Override
	public List<EmSkill> getSkill(EmSkill emSkill) throws Exception {
		// TODO Auto-generated method stub
		List<EmSkill> emSkiList = null;
		Criteria criteria = sessionfactory.getCurrentSession().createCriteria(EmSkill.class);
		if (emSkill != null) {
			if (emSkill.getSkillId() != null) {
				criteria.add(Restrictions.eq("skillId", emSkill.getSkillId()));
			}
			if (emSkill.getSkillName() != null) {
				criteria.add(Restrictions.eq("skillName", emSkill.getSkillName()));
			}

		}
		criteria.add(Restrictions.eq("activateFlag", AppConstants.ACTIVE_FLAG));
		criteria.addOrder(Order.desc("skillCreatedDate"));
		emSkiList = criteria.list();
		return emSkiList;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.gomap.performance.organisastion.dao.SkillDao#mapEmployeeSkill(com.gomap.
	 * performance.organisastion.model.EmEmployeeSkillMpg)
	 */
	@Override
	public EmEmployeeSkillMpg mapEmployeeSkill(EmEmployeeSkillMpg emEmployeeSkillMpg) throws Exception {
		// TODO Auto-generated method stub
		sessionfactory.getCurrentSession().saveOrUpdate(emEmployeeSkillMpg);
		return emEmployeeSkillMpg;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.gomap.performance.organisastion.dao.SkillDao#updateEMployeeSkill(com.
	 * gomap.performance.organisastion.model.EmEmployeeSkillMpg)
	 */
	@Override
	public void updateEMployeeSkill(EmEmployeeSkillMpg emEmployeeSkillMpg) throws Exception {
		// TODO Auto-generated method stub

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.gomap.performance.organisastion.dao.SkillDao#deleteEmployeeSkill(com.
	 * gomap.performance.organisastion.model.EmEmployeeSkillMpg)
	 */
	@Override
	public void deleteEmployeeSkill(EmEmployeeSkillMpg emEmployeeSkillMpg) throws Exception {
		// TODO Auto-generated method stub

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.gomap.performance.organisastion.dao.SkillDao#getEMployeeSkill(java.lang.
	 * Integer, java.lang.Integer)
	 */
	@Override
	public List<EmEmployeeSkillMpg> getEMployeeSkill(Integer employeeId, Integer skillId) throws Exception {
		// TODO Auto-generated method stub
		Criteria criteria = sessionfactory.getCurrentSession().createCriteria(EmEmployeeSkillMpg.class);
		if (employeeId != null) {
			criteria.add(Restrictions.eq("employeeId", employeeId));
		}
		if (skillId != null) {
			criteria.add(Restrictions.eq("skillId", skillId));
		}
		criteria.add(Restrictions.eq("activateFlag", AppConstants.ACTIVE_FLAG));
		return criteria.list();
	}

}

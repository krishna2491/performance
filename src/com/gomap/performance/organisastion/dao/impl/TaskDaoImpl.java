/**
 * Generated By Krishnakant Bairagi
 */
package com.gomap.performance.organisastion.dao.impl;

import java.util.Date;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.hibernate.hql.internal.ast.tree.RestrictableStatement;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.gomap.performance.master.constant.AppConstants;
import com.gomap.performance.organisastion.dao.TaskDao;
import com.gomap.performance.organisastion.model.EmTask;
import com.gomap.performance.organisastion.model.EmployeeTaskMpg;
import com.gomap.performance.organisastion.model.TeamGoals;
import com.gomap.performance.organisastion.model.TeamTask;

/**
 * @author krishnakant.bairagi
 *
 */
@Repository
public class TaskDaoImpl implements TaskDao {

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.TaskDao#createTask(com.gomap.performance.organisastion.model.EmTask)
	 */
	@Autowired
	private SessionFactory sessionFactory;

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.TaskDao#createTask(com.gomap.performance.organisastion.model.EmTask)
	 */
	@Override
	public void createTask(EmTask emTask) throws Exception {
		// TODO Auto-generated method stub
		sessionFactory.getCurrentSession().save(emTask);
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.TaskDao#updateTask(com.gomap.performance.organisastion.model.EmTask)
	 */
	@Override
	public void updateTask(EmTask emTask) throws Exception {
		// TODO Auto-generated method stub
		sessionFactory.getCurrentSession().update(emTask);
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.TaskDao#deleteTask(com.gomap.performance.organisastion.model.EmTask)
	 */
	@Override
	public void deleteTask(EmTask emTask) throws Exception {
		// TODO Auto-generated method stub
		updateTask(emTask);
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.TaskDao#getTask(com.gomap.performance.organisastion.model.EmTask)
	 */
	@Override
	public List<EmTask> getTask(EmTask emTask) throws Exception {
		// TODO Auto-generated method stub
		Criteria criteria=sessionFactory.getCurrentSession().createCriteria(EmTask.class);
		if(emTask!=null && emTask.getTaskId()!=null)
		{
			criteria.add(Restrictions.eq("taskId", emTask.getTaskId()));
		}
		if(emTask!=null && emTask.getProjectId()!=null)
		{
			criteria.add(Restrictions.eq("projectId", emTask.getProjectId()));
		}
		if(emTask.getDepartmentId()!=null)
		{
			criteria.add(Restrictions.eq("departmentId", emTask.getDepartmentId()));
		}
		if(emTask.getAssignedById()!=null)
		{
			criteria.add(Restrictions.eq("assignedById", emTask.getAssignedById()));
		}
		if(emTask.getAssignedToId()!=null)
		{
			criteria.add(Restrictions.eq("assignedToId", emTask.getAssignedToId()));
		}
		if(emTask.getTaskDueDate()!=null)
		{
			criteria.add(Restrictions.eq("taskDueDate", emTask.getTaskDueDate()));
		}
		if(emTask.getTaskStatus()!=null)
		{
			criteria.add(Restrictions.eq("taskDueDate", emTask.getTaskDueDate()));
		}
		criteria.add(Restrictions.eq("activateFlag",AppConstants.ACTIVE_FLAG));
		criteria.addOrder(Order.desc("taskCreatedDate"));
		return criteria.list();
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.TaskDao#mapEMployeeTask(com.gomap.performance.organisastion.model.EmployeeTaskMpg)
	 */
	@Override
	public void mapEMployeeTask(EmployeeTaskMpg employeeTaskMpg) throws Exception {
		// TODO Auto-generated method stub
		sessionFactory.getCurrentSession().save(employeeTaskMpg);
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.TaskDao#updateEmplyeeTaskMpg(com.gomap.performance.organisastion.model.EmployeeTaskMpg)
	 */
	@Override
	public void updateEmplyeeTaskMpg(EmployeeTaskMpg employeeTaskMpg) throws Exception {
		// TODO Auto-generated method stub
		sessionFactory.getCurrentSession().update(employeeTaskMpg);
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.TaskDao#getEmployeeTask(java.lang.Integer, java.lang.Integer)
	 */
	@Override
	public List<EmployeeTaskMpg> getEmployeeTask(Integer employeeId, Integer taskId) throws Exception {
		// TODO Auto-generated method stub

		// TODO Auto-generated method stub
		Criteria criteria=sessionFactory.getCurrentSession().createCriteria(EmployeeTaskMpg.class);
		if(employeeId!=null)
		{
			criteria.add(Restrictions.eq("employeeId",employeeId));
		}
		if(taskId!=null)
		{
			criteria.add(Restrictions.eq("taskId", taskId));
		}
		criteria.add(Restrictions.eq("activateFlag",AppConstants.ACTIVE_FLAG));
		criteria.addOrder(Order.desc("createdDate"));
		return criteria.list();
	
	}

	/* (non-Javadoc)
	 * @see com.gomap.performance.organisastion.dao.TaskDao#getMyTeamTask(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer)
	 */
	@Override
	public List<TeamTask> getMyTeamTask(Integer createdBy, Integer assignToId, Integer asssignById, Integer projectId,
			Integer teamId) {
		// TODO Auto-generated method stub
		
		StringBuilder bd=new StringBuilder("select new com.gomap.performance.organisastion.model.TeamTask(team.teamName,team.teamId,emp.employeeFname,"
				+ "emp.employeeMname,emp.employeeId ");
				bd.append(" ,task.taskId,task.taskDescription,task.taskPriority,task.taskDueDate,taskMpg.employeeTaskStatus,taskMpg.employeeTaskId"
						+ " ,taskMpg.comment,taskMpg.reply,taskMpg.completionDate,task.taskStartDate ) from EmEmployee as emp,");
				
		bd.append("EmTeam as team,EmTeamMember as tmember,EmTask as task,EmployeeTaskMpg as taskMpg");
		bd.append(" where team.activateFlag=1 and tmember.activateFlag=1 and tmember.employeeId=emp.employeeId and tmember.teamId=team.teamId "
				+ " and emp.activateFlag=1 and task.activateFlag=1 and taskMpg.activateFlag=1 and taskMpg.employeeId=tmember.employeeId and task.taskId=taskMpg.taskId order by team.teamName");
		
		if(createdBy!=null)
		{
			bd.append(" and team.teamCreatedBy= "+createdBy);
		}
		if(projectId!=null)
		{
			bd.append(" and team.projectId= "+projectId);
		}
//		if(assignToId!=null)
//		{
//			bd.append(" and task.assignedToId="+assignToId);
//		}
//		if(asssignById!=null)
//		{
//			bd.append(" and task.assignedById="+asssignById);
//		}
		if(teamId!=null)
		{
			bd.append(" and team.teamId="+teamId);
		}
		
		List<TeamTask> objList=this.sessionFactory.getCurrentSession().createQuery(bd.toString()).list();
		return objList;
	}
	
	}

/**
 * Generated By Krishnakant Bairagi
 */
package com.gomap.performance.organisastion.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.gomap.performance.master.constant.AppConstants;
import com.gomap.performance.master.constant.UrlConstants;
import com.gomap.performance.organisastion.dto.EmEmployeeDto;
import com.gomap.performance.organisastion.dto.EmFeedbackRequestDto;
import com.gomap.performance.organisastion.dto.ResponseDTO;
import com.gomap.performance.organisastion.enumorg.ErrorCodeEnums;
import com.gomap.performance.organisastion.service.FeedbackService;
import com.gomap.performance.organisastion.util.ResponseWriter;

/**
 * @author krishnakant.bairagi
 *
 */
@RestController
public class FeedbackController {
	
	private static final Logger logger = LoggerFactory.getLogger(FeedbackController.class);
	
	@Autowired
	private FeedbackService feedbackSrvc;
	
	@CrossOrigin(origins = AppConstants.CORS)
	@RequestMapping(value = {UrlConstants.API_ADD_FEEDBACK}, method = RequestMethod.POST)
	public @ResponseBody ResponseDTO createFeedback(@RequestBody EmFeedbackRequestDto emFeedbackRequestDto, BindingResult result) {
		ResponseDTO  responseDTO=new ResponseDTO();
		try {  
			if(result.hasErrors()){
				responseDTO = new ResponseDTO();
				responseDTO.setErrorCode(300);
				responseDTO = ResponseWriter.writeResponse(responseDTO);
			} else {
				;
			//	responseDTO.setDataObj(employeeDto);
				responseDTO=feedbackSrvc.createFeedbackRequest(emFeedbackRequestDto);
				//responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
			}
		} catch (Exception e) {
			responseDTO = ResponseWriter.writeResponse(e.getCause(), e);
			logger.error("error",e);
		} 
		return responseDTO;
	}
	@CrossOrigin(origins = AppConstants.CORS)
	@RequestMapping(value = {UrlConstants.API_GET_REQUESTED_FEEBBACK}, method = RequestMethod.GET)
	public @ResponseBody ResponseDTO getPendingFeedback(@RequestParam Integer employeeId) {
		ResponseDTO  responseDTO=new ResponseDTO();
		try {  
			if(employeeId!=null)
			{
				int level=1;
				responseDTO=feedbackSrvc.getPendingFeedback(employeeId, 2);
				responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
			}
			else
			{
				responseDTO.setErrorMsg("Employee Id is mandatory");
				responseDTO.setErrorCode(411);
			}
			
		} catch (Exception e) {
			responseDTO = ResponseWriter.writeResponse(e.getCause(), e);
			logger.error("error",e);
		} 
		return responseDTO;
	}
	@CrossOrigin(origins = AppConstants.CORS)
	@RequestMapping(value = {UrlConstants.API_GET_SUBMITTED_FEEBBACK}, method = RequestMethod.GET)
	public @ResponseBody ResponseDTO getSubmittedFeedback(@RequestParam Integer employeeId) {
		ResponseDTO  responseDTO=new ResponseDTO();
		try {  
			if(employeeId!=null)
			{
			
				responseDTO=feedbackSrvc.getPendingFeedback(employeeId, 3);
				responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
			}
			else
			{
				responseDTO.setErrorMsg("Employee Id is mandatory");
				responseDTO.setErrorCode(411);
			}
			
		} catch (Exception e) {
			responseDTO = ResponseWriter.writeResponse(e.getCause(), e);
			logger.error("error",e);
		} 
		return responseDTO;
	}
	@CrossOrigin(origins = AppConstants.CORS)
	@RequestMapping(value = {UrlConstants.API_GET_MY_FEEBBACK}, method = RequestMethod.GET)
	public @ResponseBody ResponseDTO getMyFeedback(@RequestParam Integer employeeId) {
		ResponseDTO  responseDTO=new ResponseDTO();
		try {  
			if(employeeId!=null)
			{
			
				responseDTO=feedbackSrvc.getPendingFeedback(employeeId, 1);
				responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
			}
			else
			{
				responseDTO.setErrorMsg("Employee Id is mandatory");
				responseDTO.setErrorCode(411);
			}
			
		} catch (Exception e) {
			responseDTO = ResponseWriter.writeResponse(e.getCause(), e);
			logger.error("error",e);
		} 
		return responseDTO;
	}
	@CrossOrigin(origins = AppConstants.CORS)
	@RequestMapping(value = {UrlConstants.API_DELETE_FEEDBACK}, method = RequestMethod.POST)
	public @ResponseBody ResponseDTO deleteFeedback(@RequestBody EmFeedbackRequestDto emFeedbackRequestDto, BindingResult result) {
		ResponseDTO  responseDTO=new ResponseDTO();
		try {  
			if(result.hasErrors()){
				responseDTO = new ResponseDTO();
				responseDTO.setErrorCode(300);
				responseDTO = ResponseWriter.writeResponse(responseDTO);
			} else {
				;
			//	responseDTO.setDataObj(employeeDto);
				responseDTO=feedbackSrvc.deleteFeedback(emFeedbackRequestDto);
				//responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
			}
		} catch (Exception e) {
			responseDTO = ResponseWriter.writeResponse(e.getCause(), e);
			logger.error("error",e);
		} 
		return responseDTO;
	}
	@CrossOrigin(origins = AppConstants.CORS)
	@RequestMapping(value = {UrlConstants.API_UPDATE_FEEDBACK}, method = RequestMethod.POST)
	public @ResponseBody ResponseDTO updateFeedbackRequest(@RequestBody EmFeedbackRequestDto emFeedbackRequestDto, BindingResult result) {
		ResponseDTO  responseDTO=new ResponseDTO();
		try {  
			if(result.hasErrors()){
				responseDTO = new ResponseDTO();
				responseDTO.setErrorCode(300);
				responseDTO = ResponseWriter.writeResponse(responseDTO);
			} else {
				;
			//	responseDTO.setDataObj(employeeDto);
				responseDTO=feedbackSrvc.provideFeedback(emFeedbackRequestDto);
			}
		} catch (Exception e) {
			responseDTO = ResponseWriter.writeResponse(e.getCause(), e);
			logger.error("error",e);
		} 
		return responseDTO;
	}
	@CrossOrigin(origins = AppConstants.CORS)
	@RequestMapping(value = {UrlConstants.API_GET_FEEDBACK}, method = RequestMethod.POST)
	public @ResponseBody ResponseDTO getFeedbackByParam(@RequestBody EmFeedbackRequestDto emFeedbackRequestDto, BindingResult result) {
		ResponseDTO  responseDTO=new ResponseDTO();
		try {  
			if(result.hasErrors()){
				responseDTO = new ResponseDTO();
				responseDTO.setErrorCode(300);
				responseDTO = ResponseWriter.writeResponse(responseDTO);
			} else {
				;
			//	responseDTO.setDataObj(employeeDto);
				responseDTO=feedbackSrvc.getFeedback(emFeedbackRequestDto);
			}
		} catch (Exception e) {
			responseDTO = ResponseWriter.writeResponse(e.getCause(), e);
			logger.error("error",e);
		} 
		return responseDTO;
	}
	
	
	@CrossOrigin(origins = AppConstants.CORS)
	@RequestMapping(value = {UrlConstants.API_GET_FEEDBACK_RATING}, method = RequestMethod.GET)
	public @ResponseBody ResponseDTO getFeedbackRatingDetails(@RequestParam Integer employeeId) {
		ResponseDTO  responseDTO=new ResponseDTO();
		try {  
			
				responseDTO=feedbackSrvc.provideFeedbackEvalution(employeeId);
			
		} catch (Exception e) {
			responseDTO = ResponseWriter.writeResponse(e.getCause(), e);
			logger.error("error",e);
		} 
		return responseDTO;
	}
}

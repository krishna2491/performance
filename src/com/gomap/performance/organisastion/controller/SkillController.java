/**
 * Generated By Krishnakant Bairagi
 */
package com.gomap.performance.organisastion.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.gomap.performance.master.constant.UrlConstants;
import com.gomap.performance.organisastion.dto.EmEmployeeSkillMpgDto;
import com.gomap.performance.organisastion.dto.EmSkillDto;
import com.gomap.performance.organisastion.dto.EmSkillDto;
import com.gomap.performance.organisastion.dto.ResponseDTO;
import com.gomap.performance.organisastion.enumorg.ErrorCodeEnums;
import com.gomap.performance.organisastion.service.SkillService;
import com.gomap.performance.organisastion.util.ResponseWriter;

/**
 * @author krishnakant.bairagi
 *
 */
@RestController
public class SkillController {
	private static final Logger logger = LoggerFactory.getLogger(SkillController.class);

	@Autowired
	private SkillService skillSrvc;
	@RequestMapping(value = {UrlConstants.API_ADD_SKILL}, method = RequestMethod.POST)
	public @ResponseBody ResponseDTO addSkill(@RequestBody EmSkillDto emSkillDto, BindingResult result) {
		ResponseDTO  responseDTO = null;
		try {  
			if(result.hasErrors()){
				responseDTO = new ResponseDTO();
				responseDTO.setErrorCode(300);
				responseDTO = ResponseWriter.writeResponse(responseDTO);
			} else {
				responseDTO=skillSrvc.createSkill(emSkillDto);
				responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
			}
		} catch (Exception e) {
			responseDTO = ResponseWriter.writeResponse(e.getCause(), e);
			logger.error("error",e);
		} 
		return responseDTO;
	}
	@RequestMapping(value = {UrlConstants.API_GET_SKILL}, method = RequestMethod.POST)
	public @ResponseBody ResponseDTO getSkill(@RequestBody EmSkillDto emSkillDto, BindingResult result) {
		ResponseDTO  responseDTO = new ResponseDTO();
		try {  
			if(result.hasErrors()){
				responseDTO = new ResponseDTO();
				responseDTO.setErrorCode(300);
				responseDTO = ResponseWriter.writeResponse(responseDTO);
			} else {
				responseDTO=skillSrvc.getSkill(emSkillDto);
				//responseDTO.setDataObj(emSkillDto);
				responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
			}
		} catch (Exception e) {
			responseDTO = ResponseWriter.writeResponse(e.getCause(), e);
			logger.error("error",e);
		} 
		return responseDTO;
	}
	
	@RequestMapping(value = {UrlConstants.API_UPDATE_SKILL}, method = RequestMethod.POST)
	public @ResponseBody ResponseDTO updateSkill(@RequestBody EmSkillDto emSkillDto, BindingResult result) {
		ResponseDTO  responseDTO = null;
		try {  
			if(result.hasErrors()){
				responseDTO = new ResponseDTO();
				responseDTO.setErrorCode(300);
				responseDTO = ResponseWriter.writeResponse(responseDTO);
			} else {
				responseDTO=skillSrvc.updateSkill(emSkillDto);
				responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
			}
		} catch (Exception e) {
			responseDTO = ResponseWriter.writeResponse(e.getCause(), e);
			logger.error("error",e);
		} 
		return responseDTO;
	}
	
	
	@RequestMapping(value = {UrlConstants.API_MAP_EMPLOYEE_SKILL}, method = RequestMethod.POST)
	public @ResponseBody ResponseDTO addSkill(@RequestBody List<EmEmployeeSkillMpgDto> emSkillDtoList, BindingResult result) {
		ResponseDTO  responseDTO = null;
		try {  
			if(result.hasErrors()){
				responseDTO = new ResponseDTO();
				responseDTO.setErrorCode(300);
				responseDTO = ResponseWriter.writeResponse(responseDTO);
			} else {
				responseDTO=skillSrvc.processSkilList(emSkillDtoList);
				responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
			}
		} catch (Exception e) {
			responseDTO = ResponseWriter.writeResponse(e.getCause(), e);
			logger.error("error",e);
		} 
		return responseDTO;
	}
	
	@RequestMapping(value = {UrlConstants.API_GET_EMPLOYEE_SKILL}, method = RequestMethod.POST)
	public @ResponseBody ResponseDTO getEmployeeSkill(@RequestBody EmEmployeeSkillMpgDto emSkillDto, BindingResult result) {
		ResponseDTO  responseDTO = null;
		try {  
			if(result.hasErrors()){
				responseDTO = new ResponseDTO();
				responseDTO.setErrorCode(300);
				responseDTO.setDataObj(null);
				responseDTO = ResponseWriter.writeResponse(responseDTO);
			} else {
				responseDTO=new ResponseDTO();
				responseDTO=skillSrvc.getEmployeeSkill(emSkillDto);
				responseDTO.setErrorCode(ErrorCodeEnums.NO_ERROR.getErrorCode());
			}
		} catch (Exception e) {
			responseDTO = ResponseWriter.writeResponse(e.getCause(), e);
			logger.error("error",e);
		} 
		return responseDTO;
	}
	
}
